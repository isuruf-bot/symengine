/* Generated by re2c 1.1.1 on Tue Jul 30 23:09:06 2019 */
#line 1 "tok2.re"
#include <stdio.h>

enum num_t { ERR, OPERATOR, POW, LE, EQ, GE, IDENTIFIER };

static num_t lex(const char *YYCURSOR)
{
    const char *YYMARKER;
    
#line 12 "tok2.cpp"
{
	char yych;
	yych = *YYCURSOR;
	switch (yych) {
	case 0x00:
	case 0x01:
	case 0x02:
	case 0x03:
	case 0x04:
	case 0x05:
	case 0x06:
	case 0x07:
	case 0x08:
	case '\t':
	case '\n':
	case '\v':
	case '\f':
	case '\r':
	case 0x0E:
	case 0x0F:
	case 0x10:
	case 0x11:
	case 0x12:
	case 0x13:
	case 0x14:
	case 0x15:
	case 0x16:
	case 0x17:
	case 0x18:
	case 0x19:
	case 0x1A:
	case 0x1B:
	case 0x1C:
	case 0x1D:
	case 0x1E:
	case 0x1F:
	case ' ':
	case '!':
	case '"':
	case '#':
	case '$':
	case '%':
	case '\'':
	case '.':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case ':':
	case ';':
	case '?':
	case '[':
	case '\\':
	case ']':
	case '`':
	case '{':
	case '}':
	case 0x7F:	goto yy2;
	case '&':
	case '(':
	case ')':
	case '+':
	case ',':
	case '-':
	case '/':
	case '^':
	case '|':
	case '~':	goto yy4;
	case '*':	goto yy6;
	case '<':	goto yy7;
	case '=':	goto yy8;
	case '>':	goto yy9;
	case '@':	goto yy10;
	default:	goto yy12;
	}
yy2:
	++YYCURSOR;
yy3:
#line 24 "tok2.re"
	{ return ERR; }
#line 99 "tok2.cpp"
yy4:
	++YYCURSOR;
yy5:
#line 25 "tok2.re"
	{ return OPERATOR; }
#line 105 "tok2.cpp"
yy6:
	yych = *++YYCURSOR;
	switch (yych) {
	case '*':	goto yy10;
	default:	goto yy5;
	}
yy7:
	yych = *++YYCURSOR;
	switch (yych) {
	case '=':	goto yy15;
	default:	goto yy5;
	}
yy8:
	yych = *++YYCURSOR;
	switch (yych) {
	case '=':	goto yy17;
	default:	goto yy3;
	}
yy9:
	yych = *++YYCURSOR;
	switch (yych) {
	case '=':	goto yy19;
	default:	goto yy5;
	}
yy10:
	++YYCURSOR;
#line 26 "tok2.re"
	{ return POW; }
#line 134 "tok2.cpp"
yy12:
	yych = *++YYCURSOR;
	switch (yych) {
	case 0x00:
	case 0x01:
	case 0x02:
	case 0x03:
	case 0x04:
	case 0x05:
	case 0x06:
	case 0x07:
	case 0x08:
	case '\t':
	case '\n':
	case '\v':
	case '\f':
	case '\r':
	case 0x0E:
	case 0x0F:
	case 0x10:
	case 0x11:
	case 0x12:
	case 0x13:
	case 0x14:
	case 0x15:
	case 0x16:
	case 0x17:
	case 0x18:
	case 0x19:
	case 0x1A:
	case 0x1B:
	case 0x1C:
	case 0x1D:
	case 0x1E:
	case 0x1F:
	case ' ':
	case '!':
	case '"':
	case '#':
	case '$':
	case '%':
	case '&':
	case '\'':
	case '(':
	case ')':
	case '*':
	case '+':
	case ',':
	case '-':
	case '.':
	case '/':
	case ':':
	case ';':
	case '<':
	case '=':
	case '>':
	case '?':
	case '@':
	case '[':
	case '\\':
	case ']':
	case '^':
	case '`':
	case '{':
	case '|':
	case '}':
	case '~':
	case 0x7F:	goto yy14;
	default:	goto yy12;
	}
yy14:
#line 30 "tok2.re"
	{ return IDENTIFIER; }
#line 208 "tok2.cpp"
yy15:
	++YYCURSOR;
#line 27 "tok2.re"
	{ return LE; }
#line 213 "tok2.cpp"
yy17:
	++YYCURSOR;
#line 29 "tok2.re"
	{ return EQ; }
#line 218 "tok2.cpp"
yy19:
	++YYCURSOR;
#line 28 "tok2.re"
	{ return GE; }
#line 223 "tok2.cpp"
}
#line 31 "tok2.re"

        //implicitmul { return IMPLICIT_MUL; }
        //numeric { return NUMERIC; }
}

int main(int argc, char **argv)
{
    for (int i = 1; i < argc; ++i) {
        switch (lex(argv[i])) {
            case ERR: printf("error\n"); break;
            case OPERATOR: printf("OPERATOR\n"); break;
            case POW: printf("POW\n"); break;
            case LE: printf("LE\n"); break;
            case EQ: printf("EQ\n"); break;
            case GE: printf("GE\n"); break;
            case IDENTIFIER: printf("IDENTIFIER\n"); break;
        }
    }
    return 0;
}
